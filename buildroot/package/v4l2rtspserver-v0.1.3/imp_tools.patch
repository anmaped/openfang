diff -Nura v4l2rtspserver_imp/CMakeLists.txt v4l2rtspserver_imp_tools/CMakeLists.txt
--- v4l2rtspserver_imp/CMakeLists.txt	2019-02-01 20:08:29.539626000 +0100
+++ v4l2rtspserver_imp_tools/CMakeLists.txt	2019-02-03 21:22:42.357609631 +0100
@@ -9,7 +9,7 @@
 set (CMAKE_CXX_STANDARD 11)
 set(CMAKE_C_FLAGS "-Wall")
 set(CMAKE_CXX_FLAGS "-Wall")
-SET(CMAKE_FIND_ROOT_PATH "${CMAKE_SOURCE_DIR}/${CMAKE_SYSTEM_PROCESSOR}")
+#SET(CMAKE_FIND_ROOT_PATH "${CMAKE_SOURCE_DIR}/${CMAKE_SYSTEM_PROCESSOR}")
 
 # set version based on git
 find_package(Git)
@@ -37,6 +37,65 @@
 message(STATUS "CMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}")
 message(STATUS "CMAKE_FIND_ROOT_PATH=${CMAKE_FIND_ROOT_PATH}")
 
+# external tools
+include_directories(tools/)
+add_library(sharedmem tools/sharedmem.cpp)
+target_link_libraries(${PROJECT_NAME} sharedmem)
+
+add_executable(getimage tools/getimage.cpp)
+target_link_libraries(getimage sharedmem)
+add_executable(setconf tools/setconf.cpp)
+target_link_libraries(setconf sharedmem)
+
+add_executable(motor tools/motor.c)
+add_executable(autonight tools/autonight.c)
+
+include_directories("filter")
+add_library(filter filter/g711super.c  filter/noise_remover.c  filter/wave.c filter/mylog.c)
+target_link_libraries(${PROJECT_NAME} filter)
+
+add_library(wrap tools/wrap.c)
+target_link_libraries(${PROJECT_NAME} wrap)
+
+find_path(LIBFREETYPE2_INCLUDE_DIR freetype2)
+message(STATUS "Freetype2")
+message(STATUS ${LIBFREETYPE2_INCLUDE_DIR})
+include_directories(${LIBFREETYPE2_INCLUDE_DIR}/freetype2/)
+include_directories(${LIBFREETYPE2_INCLUDE_DIR}/freetype2/config/)
+
+find_library(LIBFREETYPE2_LIBRARIES libfreetype.so)
+message(STATUS ${LIBFREETYPE2_LIBRARIES})
+target_link_libraries(${PROJECT_NAME} "${LIBFREETYPE2_LIBRARIES}")
+
+find_path(LIBOPUS_INCLUDE_DIR opus)
+message(STATUS "LIBOPUS")
+message(STATUS ${LIBOPUS_INCLUDE_DIR})
+include_directories(${LIBOPUS_INCLUDE_DIR}/opus/)
+
+find_library(LIBOPUS_LIBRARIES libopus.so)
+message(STATUS ${LIBOPUS_LIBRARIES})
+find_library(LIBLAME_LIBRARIES libmp3lame.so)
+message(STATUS ${LIBLAME_LIBRARIES})
+
+target_link_libraries(${PROJECT_NAME} "${LIBOPUS_LIBRARIES}")
+target_link_libraries(${PROJECT_NAME} "${LIBLAME_LIBRARIES}")
+
+SET(CMAKE_FIND_ROOT_PATH "${CMAKE_SOURCE_DIR}/${CMAKE_SYSTEM_PROCESSOR}")
+
+# Separate treatments of dynamic and static libs
+set(DEPENDLIBS ${CMAKE_CURRENT_SOURCE_DIR}/uclibc/libalog.so ;
+               ${CMAKE_CURRENT_SOURCE_DIR}/uclibc/libimp.so ;
+               ${CMAKE_CURRENT_SOURCE_DIR}/uclibc/libsysutils.so ;
+   )
+
+foreach (LIB ${DEPENDLIBS})
+    target_link_libraries(${PROJECT_NAME} ${LIB})
+    install(FILES ${LIB} DESTINATION lib NAMELINK_ONLY)
+endforeach (LIB)
+
+target_link_libraries(${PROJECT_NAME} "rt")
+target_link_libraries(${PROJECT_NAME} "wrap")
+
 # v4l2wrapper
 include_directories("v4l2wrapper/inc")
 find_library(V4L2WRAPPER_LIBRARY libv4l2wrapper.a)
@@ -134,3 +174,8 @@
 endif()
 INCLUDE(CPack)
 
+install (TARGETS getimage DESTINATION bin)
+install (TARGETS setconf DESTINATION bin)
+install (TARGETS motor DESTINATION bin)
+install (TARGETS autonight DESTINATION bin)
+
diff -Nura v4l2rtspserver-v0.0.8_/tools/wrap.c v4l2rtspserver-v0.0.8/tools/wrap.c
--- v4l2rtspserver_imp/tools/wrap.c		1970-01-01 01:00:00.000000000 +0100
+++ v4l2rtspserver_imp_tools/tools/wrap.c	2018-11-17 23:10:23.000000000 +0100
@@ -0,0 +1,13 @@
+#include <stdlib.h>
+#include <ctype.h>
+
+
+unsigned short int * __ctype_b(void)
+{
+	return __ctype_b_loc();
+}
+
+__int32_t  * __ctype_tolower(void)
+{
+	return __ctype_tolower_loc();
+}
diff -Nura v4l2rtspserver_imp/tools/autonight.c v4l2rtspserver_imp_tools/tools/autonight.c
--- v4l2rtspserver_imp/tools/autonight.c	1970-01-01 01:00:00.000000000 +0100
+++ v4l2rtspserver_imp_tools/tools/autonight.c	2018-09-24 20:38:42.000000000 +0200
@@ -0,0 +1,388 @@
+/*****************************************************************************
+ * autonight.c
+ * April 26, 2018
+ *
+ * Copyright 2018 - Howard Logic
+ * https://howardlogic.com
+ * All Rights Reserved
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>
+ *
+ *****************************************************************************/
+
+#include <stdio.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <stdbool.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <getopt.h>
+#include <string.h>
+
+const char *device = "/dev/jz_adc_aux_0";
+const char *nightModeCmd = "/opt/scripts/nightmode.sh";
+int readAverageCount = 25;
+int delayBetweenReads = 10;
+int windowSize = 5;
+double thresholdOn = 40.0;
+double thresholdOff = 45.0;
+int verbose = 0;
+bool nightModeEnabled = false;
+
+int software_method(void);
+
+int jzAuxReadSample(const char *device, unsigned int *buffer) {
+        int fd = open(device, O_RDONLY);
+        if(fd == -1) return -1;
+        int size = sizeof(*buffer);
+        int ct = read(fd, (void *)buffer, size);
+        close(fd);
+        return ct == size;
+}
+
+int jzAuxReadAverage(const char *device, double *value, int count) {
+        if(count < 1) return 0;
+        double valret = 0.0;
+        int i;
+        for(i = 0; i < count; i++) {
+                unsigned int sample;
+                if(!jzAuxReadSample(device, &sample)) return 0;
+                valret += sample;
+        }
+        valret /= count;
+        if(value) *value = valret;
+        return 1;
+}
+
+void updateNightMode() {
+        char buf[256];
+        if(verbose) printf("Night Mode %s\n", nightModeEnabled ? "Enabled" : "Disabled");
+        snprintf(buf, sizeof(buf), "%s %s\n", nightModeCmd, nightModeEnabled ? "on" : "off");
+        int ret = system(buf);
+        if(ret) fprintf(stderr, "WARNING: %s returned %d\n", buf, ret);
+        return;
+}
+
+void usage() {
+        printf("Usage: autonight [options]\n\n");
+        printf("Options:\n");
+        printf("-v              Increase verbosity\n");
+        printf("-S              uses software to determine day/night\n");
+        printf("                    following options don't mean anything for software method\n");
+        printf("-D <str>        Sets jz_adc_aux device (default: %s)\n", device);
+        printf("-c <str>        Sets the command to call to set night mode (default: %s)\n", nightModeCmd);
+        printf("-a <int>        Sets the number of ADC reads to average into a single sample (default: %d)\n", readAverageCount);
+        printf("-d <int>        Delay (in seconds) between averaged reads (default: %d)\n", delayBetweenReads);
+        printf("-n <int>        Number of averaged samples to window average for thresholding (default: %d)\n", windowSize);
+        printf("-O <float>      Turn on night mode when window average value drops below this threshold (default: %.2lf)\n", thresholdOn);
+        printf("-F <floag>      Turn off night mode when window average value goes above this threshold (default: %.2lf)\n", thresholdOff);
+        printf("-h              Print this usage statement and exit\n");
+        return;
+}
+
+int main(int argc, char *argv[]) {
+        int opt;
+        int windowIndex = 0;
+        bool windowFull = false;
+        double *window = (double *)malloc(sizeof(double) * windowSize);
+        bool use_software_method = false;
+
+        while((opt = getopt(argc, argv, "D:c:a:d:n:O:F:vSh")) != -1) {
+                switch (opt) {
+                        case 'D': device = optarg;
+                                  break;
+
+                        case 'c': nightModeCmd = optarg;
+                                  break;
+
+                        case 'a': readAverageCount = atoi(optarg);
+                                  break;
+
+                        case 'd': delayBetweenReads = atoi(optarg);
+                                  break;
+
+                        case 'n': windowSize = atoi(optarg);
+                                  break;
+
+                        case 'O': thresholdOn = atof(optarg);
+                                  break;
+
+                        case 'F': thresholdOff = atof(optarg);
+                                  break;
+
+                        case 'v':
+                                  verbose++;
+                                  break;
+
+                        case 'S':
+                                  use_software_method = true;
+                                  break;
+
+                        case 'h':
+                                  usage();
+                                  return 0;
+
+                        default:
+                                  fprintf(stderr, "Unknown argument: '%c'\n", opt);
+                                  usage();
+                                  return 1;
+                }
+        }
+        if(use_software_method){
+          return software_method();
+        }
+
+        while(true) {
+                double value;
+                int ret = jzAuxReadAverage(device, &value, readAverageCount);
+                if(!ret) {
+                        fprintf(stderr, "ERROR: jzAuxReadAverage(%d) failed: %m\n", readAverageCount);
+                        sleep(delayBetweenReads);
+                        continue;
+                }
+                if(verbose) printf("Current value: %.2lf\n", value);
+                window[windowIndex] = value;
+                windowIndex++;
+                if(windowIndex >= windowSize) {
+                        windowFull = true;
+                        windowIndex = 0;
+                }
+                if(windowFull) {
+                        double windowAvg = 0.0;
+                        int i;
+                        for(i = 0; i < windowSize; i++) windowAvg += window[i];
+                        windowAvg /= windowSize;
+                        if(verbose) printf("Window (%d) Avg: %.2lf\n", windowSize, windowAvg);
+                        if(!nightModeEnabled && windowAvg <= thresholdOn) {
+                                nightModeEnabled = true;
+                                updateNightMode();
+
+                        } else if(nightModeEnabled && windowAvg >= thresholdOff) {
+                                nightModeEnabled = false;
+                                updateNightMode();
+                        }
+                }
+                sleep(delayBetweenReads);
+        }
+
+        return 0;
+}
+#define ISP_INFO  "/proc/jz/isp/isp_info"
+#define EXPOSURE  "ISP exposure log2 id: "
+#define IRIDIX    "ISP Iridix strength : "
+#define COLORTEMP "ISP WB Temperature : "
+
+int readIspInfo(unsigned int *exposure, unsigned int *iridix, unsigned int *colortemp)
+{
+  int fd, bytes_to_read, bytes_in_buf, i, bytes_read;
+  char buf[100];
+  int ret=0;
+
+  buf[99] = 0;
+  if(!exposure || !iridix || !colortemp){
+    fprintf(stderr, "ERROR: %s: Invalid param\n", __func__);
+    return -1;
+  }
+
+  if( (fd = open(ISP_INFO, O_RDONLY)) <= 0){
+    fprintf(stderr, "ERROR: %s: open failed\n", __func__);
+    return -1;
+  }
+
+  bytes_to_read = sizeof(buf);
+  bytes_in_buf = 0;
+  while( ( bytes_read = read(fd, &buf[bytes_in_buf], bytes_to_read) ) > 0 || bytes_in_buf > 0) {
+    if(bytes_read > 0) bytes_in_buf += bytes_read;
+    if(strncmp(buf, EXPOSURE, sizeof(EXPOSURE)-1) == 0){
+      *exposure = atoi(&buf[sizeof(EXPOSURE)-1]);
+      ret++;
+    }else if(strncmp(buf, IRIDIX, sizeof(IRIDIX)-1) == 0){
+      *iridix = atoi(&buf[sizeof(IRIDIX)-1]);
+      ret++;
+    }else if(strncmp(buf, COLORTEMP, sizeof(COLORTEMP)-1) == 0){
+      *colortemp = atoi(&buf[sizeof(COLORTEMP)-1]);
+      ret++;
+    }
+    if(ret == 3) break;
+
+    i = 0;
+    while(i < bytes_in_buf && buf[i] != 0xA){
+      i++;
+    }
+    if(i >= bytes_in_buf){
+      fprintf(stderr, "ERROR: %s: line is longer than %d chars buf\n", __func__, bytes_in_buf);
+      close(fd);
+      return ret;
+    }
+    memcpy(buf, &buf[i+1], bytes_in_buf - i - 1);
+    bytes_to_read = i+1;
+    bytes_in_buf = bytes_in_buf - bytes_to_read;
+  }
+  close(fd);
+  return ret;
+}
+
+typedef enum {
+  DAY_MODE,
+  WAIT_IRIDX,
+  NIGHT_MODE_START,
+  NIGHT_MODE_WAIT,
+} States;
+
+int software_method(void)
+{
+  int exposure, iridix, colortemp;
+  int last_exposure=-1;
+  int night_exposure, night_iridix;
+  int night_mode_wait_count, iridx_wait_count;
+  int exp_fall_count;
+  States state;
+
+  int max_night_ex_wait = 6;
+  int max_faill_count = 25;
+  int max_iridx_wait = 20;
+
+  // Start with day
+  nightModeEnabled = false;
+  updateNightMode();
+  state = DAY_MODE;
+
+  while(1){
+    if(readIspInfo(&exposure, &iridix, &colortemp) == 3){
+      if(last_exposure == -1) last_exposure = exposure;
+      if( (exposure < last_exposure && ((last_exposure - exposure)*100)/last_exposure >= 1) ||
+          (exposure > last_exposure && ((exposure - last_exposure)*100)/exposure >= 1) ){
+        //Exposure chaging rapidly. Wait for it to get stablized
+        if(verbose >= 2) printf("Exposure falling by %d%% to %d count %d\n", ((last_exposure - exposure)*100)/last_exposure, exposure, exp_fall_count);
+        last_exposure = exposure;
+        exp_fall_count++;
+        if(exp_fall_count < max_faill_count){
+          // If it has been changing for while, just take it
+          night_mode_wait_count = 0;
+          continue;
+        }
+      }
+      last_exposure = exposure;
+      exp_fall_count = 0;
+      if(colortemp <= 3100){
+        if(state != DAY_MODE){
+          // Check color temp for any state in night mode
+          if(verbose >= 1) printf("Colortemp %d\n", colortemp);
+            nightModeEnabled = false;
+            updateNightMode();
+            state = DAY_MODE;
+          }
+      }
+      switch(state){
+        case DAY_MODE:
+          //Look for very high exposure setting (max is 1283554)
+          if(exposure > 1200000 && iridix <= 30){
+              if(verbose >= 1) printf("Exposure %d, %d>\n", exposure, iridix);
+              nightModeEnabled = true;
+              updateNightMode();
+              state = NIGHT_MODE_START;
+              sleep(1); // Extra sleep
+          }
+          break;
+        case NIGHT_MODE_START:
+          if(iridix >= 30){
+            // Something is likely covering us
+            if(verbose >= 1) printf("Iridx high %d, %d>\n", exposure, iridix);
+            night_iridix = iridix;
+            iridx_wait_count = 0;
+            state = WAIT_IRIDX;
+            break;
+          }
+          // save readings as initial night values
+          night_exposure = exposure;
+          night_iridix = iridix;
+          state = NIGHT_MODE_WAIT;
+          night_mode_wait_count = 0;
+          iridx_wait_count = 0;
+          break;
+        case WAIT_IRIDX:
+            // Wait for Iridx to drop to below 30
+            if(verbose >= 2) printf("WAIT_IRIDX %d, %d %d\n", iridix, night_iridix, iridx_wait_count);
+            if(iridix <= (night_iridix-2)){
+              if(verbose >= 1) printf("Iridx dropped %d, %d>\n", exposure, iridix);
+              nightModeEnabled = false;
+              updateNightMode();
+              state = DAY_MODE;
+            }else{
+              iridx_wait_count++;
+              if(iridx_wait_count >= max_iridx_wait){
+                // Give up and switch
+                if(verbose >= 1) printf("Iridx wait too long %d, %d>\n", exposure, iridix);
+                nightModeEnabled = false;
+                updateNightMode();
+                state = DAY_MODE;
+              }
+            }
+            break;
+        case NIGHT_MODE_WAIT:
+          if(verbose >= 2) printf("Exposure changed by %d%% to %d,%d (%d) %d %d %6f\n", ((last_exposure - exposure)*100)/last_exposure, exposure, iridix, night_exposure, night_iridix, colortemp, (0.95*(double)night_exposure));
+          if( (double)exposure < (0.95*(double)night_exposure) ){
+            if( iridix < (night_iridix + 4) ){
+              // Exposure droped by 5% without increasing iridix by much
+              iridx_wait_count = 0;
+              if(night_mode_wait_count < max_night_ex_wait){
+                night_mode_wait_count++;
+                if(verbose >= 2) printf("Exposure count %d <%d to %d> Iridix <%d to %d>\n", night_mode_wait_count, night_exposure, exposure, night_iridix, iridix);
+                sleep(1);
+              }else{
+                // Day mode
+                if(verbose >= 1) printf("Exposure <%d to %d> Iridix <%d to %d>\n", night_exposure, exposure, night_iridix, iridix);
+                nightModeEnabled = false;
+                updateNightMode();
+                state = DAY_MODE;
+              }
+            }else{
+              // Exposure droped by 2K but iridix is up by 2 or more
+              iridx_wait_count++;
+              night_mode_wait_count = 0;
+              sleep(1);
+              if(verbose) printf("Iridx count %d <%d to %d> Iridix <%d to %d>\n", iridx_wait_count, night_exposure, exposure, night_iridix, iridix);
+              if(iridx_wait_count > max_iridx_wait){
+                // Whatever is causing iridx is not moving. Lets assume day mode
+                if(verbose) printf("Iridix <%d to %d>\n", night_iridix, iridix);
+                nightModeEnabled = false;
+                updateNightMode();
+                state = DAY_MODE;
+              }
+            }
+          }else if(exposure > night_exposure){
+            if(verbose >= 2) printf("Exposure up to %d from %d\n", exposure, night_exposure);
+            // Reset night numbers
+            night_exposure = exposure;
+            last_exposure = exposure;
+            state = NIGHT_MODE_WAIT;
+            night_mode_wait_count = 0;
+            exp_fall_count = 0;
+          }else{
+            night_mode_wait_count = 0;
+          }
+          break;
+        default:
+          fprintf(stderr, "Invalid state %d\n", state);
+      }
+    }else{
+      // Unable to read isp_info
+      fprintf(stderr, "Unable to read isp_info\n");
+    }
+    sleep(1);
+  }
+  return -1;
+}
diff -Nura v4l2rtspserver_imp/tools/getimage.cpp v4l2rtspserver_imp_tools/tools/getimage.cpp
--- v4l2rtspserver_imp/tools/getimage.cpp	1970-01-01 01:00:00.000000000 +0100
+++ v4l2rtspserver_imp_tools/tools/getimage.cpp	2019-02-03 20:24:23.665172000 +0100
@@ -0,0 +1,17 @@
+#include<stdio.h>
+#include <cstdlib>
+
+
+#include "sharedmem.h"
+
+int main(int argc, char *argv[]) {
+
+    SharedMem& mem = SharedMem::instance();
+    void* memory = mem.getImage();
+    int memlen = mem.getImageSize();
+
+    fwrite(memory, memlen, 1, stdout);
+    free(memory);
+
+    return 0;
+}
diff -Nura v4l2rtspserver_imp/tools/motor.c v4l2rtspserver_imp_tools/tools/motor.c
--- v4l2rtspserver_imp/tools/motor.c	1970-01-01 01:00:00.000000000 +0100
+++ v4l2rtspserver_imp_tools/tools/motor.c	2018-09-15 17:14:24.000000000 +0200
@@ -0,0 +1,185 @@
+#include<stdio.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <sys/ioctl.h>
+
+#include <sys/stat.h>
+#include <fcntl.h>
+/* ioctl cmd */
+#define MOTOR_STOP		0x1
+#define MOTOR_RESET		0x2
+#define MOTOR_MOVE		0x3
+#define MOTOR_GET_STATUS	0x4
+#define MOTOR_SPEED		0x5
+#define MOTOR_GOBACK	0x6
+#define MOTOR_CRUISE	0x7
+/* directional_attr */
+#define MOTOR_DIRECTIONAL_UP    0x0
+#define MOTOR_DIRECTIONAL_DOWN    0x1
+#define MOTOR_DIRECTIONAL_LEFT    0x2
+#define MOTOR_DIRECTIONAL_RIGHT    0x3
+#define MOTOR_INIT_SPEED    1000    /* unit :ns */
+
+#define AXIS_HORIZONAL 1
+#define AXIS_VERTICAL 2
+#define AXIS_FORCIBLY 3
+
+#include <arpa/inet.h>
+#include <string.h>
+
+
+typedef struct {
+	int x;
+	int y;
+} motors_steps;
+
+enum motor_status {
+	MOTOR_IS_STOP,
+	MOTOR_IS_RUNNING,
+};
+
+typedef struct  {
+	int x;
+	int y;
+	enum motor_status status;
+	int speed;
+} motor_message;
+
+typedef struct  {
+	unsigned int x_max_steps;
+	unsigned int y_max_steps;
+	unsigned int x_cur_step;
+	unsigned int y_cur_step;
+} motor_reset_data;
+
+
+void sendCommand(int cmd, void *buffer) {
+    int fd = open("/dev/motor", O_WRONLY);
+    ioctl(fd, cmd, buffer);
+    close(fd);
+}
+
+void setSpeed(int speed) {
+    int motorspeed = speed;
+    sendCommand(MOTOR_SPEED, &motorspeed);
+}
+
+void setMovement(int direction, int steps) {
+
+    int x = 0;
+    int y = 0;
+    switch(direction){
+        case MOTOR_DIRECTIONAL_UP:
+            y += 1;
+        break;
+        case MOTOR_DIRECTIONAL_DOWN:
+            y -= 1;
+        break;
+        case MOTOR_DIRECTIONAL_LEFT:
+            x -= 1;
+        break;
+        case MOTOR_DIRECTIONAL_RIGHT:
+            x += 1;
+        break;
+    }
+    motors_steps motor_move;
+    motor_move.x = x;
+    motor_move.y = y;
+    int i = 0;
+        for(i = 0;i<steps;i++){
+            sendCommand(MOTOR_MOVE, &motor_move);
+        }
+
+}
+
+void setStop() {
+    sendCommand(MOTOR_STOP, 0);
+}
+
+void reset() {
+    motor_reset_data motor_move;
+    motor_move.x_max_steps = 0;
+    motor_move.y_max_steps = 0;
+    motor_move.x_cur_step = 0;
+    motor_move.y_cur_step = 0;
+    sendCommand(MOTOR_RESET, &motor_move);
+}
+
+
+void getStatus() {
+    motor_message status;
+    sendCommand(MOTOR_GET_STATUS, &status);
+    printf("x: %d\n", status.x);
+    printf("y: %d\n", status.y);
+    printf("speed: %d\n", status.speed);
+
+
+}
+void cruise (){
+    sendCommand(MOTOR_CRUISE, 0);
+}
+
+void calibrate() {
+    reset();
+}
+
+
+int main(int argc, char *argv[]) {
+
+
+    char direction = 0;
+    int stepsize = 100;
+
+    // Parse Arguments:
+    int c;
+    while ((c = getopt(argc, argv, "d:s:")) != -1) {
+        switch (c) {
+            case 'd':
+                direction = optarg[0];
+                break;
+            case 's':
+                stepsize = atoi(optarg);
+                break;
+            default:
+                printf("Invalid Argument %c\n", c);
+                exit(EXIT_FAILURE);
+        }
+    }
+
+
+    switch (direction) {
+        case 'u':
+            setMovement(MOTOR_DIRECTIONAL_UP, stepsize);
+            break;
+        case 'd':
+            setMovement(MOTOR_DIRECTIONAL_DOWN, stepsize);
+            break;
+        case 'l':
+            setMovement(MOTOR_DIRECTIONAL_LEFT, stepsize);
+            break;
+        case 'r':
+            setMovement(MOTOR_DIRECTIONAL_RIGHT, stepsize);
+            break;
+        case 'v':
+            calibrate();
+            break;
+        case 'h':
+            calibrate();
+            break;
+        case 's':
+            setStop();
+            break;
+        case 'c':
+            cruise();
+            break;
+        default:
+            printf("Invalid Direction Argument %c\n", direction);
+            getStatus();
+            exit(EXIT_FAILURE);
+    }
+    getStatus();
+
+    return 0;
+
+
+}
diff -Nura v4l2rtspserver_imp/tools/setconf.cpp v4l2rtspserver_imp_tools/tools/setconf.cpp
--- v4l2rtspserver_imp/tools/setconf.cpp	1970-01-01 01:00:00.000000000 +0100
+++ v4l2rtspserver_imp_tools/tools/setconf.cpp	2019-02-03 20:24:23.665172000 +0100
@@ -0,0 +1,210 @@
+#include<stdio.h>
+#include <getopt.h>
+#include <cstdlib>
+#include "sharedmem.h"
+
+#define SETGETSHAREDMEMORYINT(INT) if (get) printf("%d\n",  INT); else INT = atoi(value);
+#define SETGETSHAREDMEMORYLONG(LONG) if (get) printf("%ld\n",  LONG); else LONG = atol(value);
+#define SETGETSHAREDMEMORYSTRING(STR) if (get) printf("%s\n",  STR); else  strcpy(STR,value);
+#define SETGETSHAREDMEMORYBOOL(INT) if (get) printf("%s\n",  INT?"true":"false"); else INT= strToBool(value);
+
+int stringToInts(char *str, int val[], int size)
+{
+    int i = 0;
+    char *pt = strtok (str,",");
+    while ((pt != NULL) &&
+            i < size) {
+        int a = atoi(pt);
+        val[i] = a;
+        i++;
+        pt = strtok (NULL, ",");
+    }
+    return (i == size);
+}
+
+bool strToBool(char *str)
+{
+    if (strcasecmp(str, "true") == 0) return(true);
+    if (strcasecmp(str, "on") == 0) return(true);
+    if (strcasecmp(str, "false") == 0) return(false);
+    if (strcasecmp(str, "off") == 0) return(false);
+    if (atoi(str) == 1) return (true);
+    return false;
+}
+
+void usage(char *command)
+{
+    fprintf(stderr, "Usage %s -g -k KEY -v VALUE\n", command);
+    fprintf(stderr, "Where k to set value, g to get the value\n");
+    fprintf(stderr, "\t'f' flip mode set to\n");
+    fprintf(stderr, "\t\t'1' -> flip on\n");
+    fprintf(stderr, "\t\t'0' -> flip off\n");
+
+    fprintf(stderr, "\t'n' night mode set to\n");
+    fprintf(stderr, "\t\t'1' -> night mode on\n");
+    fprintf(stderr, "\t\t'0' -> night mode off\n");
+
+    fprintf(stderr, "\t'b' set bitrate to VALUE\n");
+    fprintf(stderr, "\t'o' OSD text set to VALUE\n");
+    fprintf(stderr, "\t'c' OSD color set VALUE to\n");
+    fprintf(stderr, "\t\t'0' for White\n");
+    fprintf(stderr, "\t\t'1' for Black\n");
+    fprintf(stderr, "\t\t'2' for Red\n");
+    fprintf(stderr, "\t\t'3' for Green\n");
+    fprintf(stderr, "\t\t'4' for Blue\n");
+    fprintf(stderr, "\t\t'5' for Cyan\n");
+    fprintf(stderr, "\t\t'6' for Yellow\n");
+    fprintf(stderr, "\t\t'7' for Purple\n");
+
+    fprintf(stderr, "\t'x' OSD position Y pos is set to VALUE\n");
+    fprintf(stderr, "\t's' OSD size\n");
+    fprintf(stderr, "\t'e' OSD font name (ttf)\n");
+    fprintf(stderr, "\t'p' OSD space between char is set to VALUE (can be negative)\n");
+    fprintf(stderr, "\t'w' fixed text width (0 variable, 1 fixed)\n");
+
+    fprintf(stderr, "\t'm' motion sensitivity (0 to 4) -1 to deactivate motion\n");
+    fprintf(stderr, "\t'z' display a circle when motion detected (-1 deactivated, use the OSD color numbers)\n");
+    fprintf(stderr, "\t'r' set detection region (shall be: x0,y0,x1,y1) the server need to be restarted to take into account the new value\n");
+    fprintf(stderr, "\t't' set tracking on/off (detection region is not taken into account anymore)\n");
+    fprintf(stderr, "\t'u' set time before launching script after no motion (to restore camera position) -1 to deactivate\n");
+
+    fprintf(stderr, "\t'h' set hardware volume (from mic)\n");
+    fprintf(stderr, "\t'i' set software volume percentage (X will add X% to the data, from 0 to xxx, -1 to do nothing)\n");
+    fprintf(stderr, "\t'q' set set filter number (1 or 2, 0 no filter)\n");
+    fprintf(stderr, "\t'l' set set highpass filter on/off\n");
+    fprintf(stderr, "\t'a' set set aec filter on/off\n");
+
+    fprintf(stderr, "\t'd' set frame rate (shall be FrmRateNum,FrmRateDen (example: 25,1 to get 25 images per second)\n");
+
+    fprintf(stderr, "Example: to set osd text: %s -k o -v OSDTEXT\n", command);
+    fprintf(stderr, "         to get osd text: %s -g o\n", command);
+
+}
+
+int main(int argc, char *argv[]) {
+
+    char key = 0;
+    char *value = NULL;
+    bool get = false;
+
+    // Parse Arguments:
+    int c;
+    while ((c = getopt(argc, argv, "g:k:v:")) != -1) {
+        switch (c) {
+            case 'g':
+                    get = true;
+                    // no break on purpose, execute 'k' case
+            case 'k':
+                if (key == 0) {
+                    key = optarg[0];
+                } else {
+                       printf("Can not use g and k values at the same time\n", c);
+                       usage(argv[0]);
+                       exit(EXIT_FAILURE);
+                }
+                break;
+
+            case 'v':
+                value = optarg;
+                break;
+
+
+            default:
+                printf("Invalid Argument %c\n", c);
+                usage(argv[0]);
+                exit(EXIT_FAILURE);
+        }
+    }
+    SharedMem &mem = SharedMem::instance();
+    shared_conf *conf = mem.getConfig();
+    //printf("%d,%d\n", conf->nightmode, conf->flip);
+    mem.readConfig();
+    //printf("%d,%d\n", conf->nightmode, conf->flip);
+    switch (key) {
+        case 'f':
+            SETGETSHAREDMEMORYINT(conf->flip );
+            break;
+        case 'n':
+            SETGETSHAREDMEMORYINT(conf->nightmode );
+            break;
+        case 'b':
+            SETGETSHAREDMEMORYINT(conf->bitrate );
+            break;
+
+        // OSD configuration
+        case 'o':
+            SETGETSHAREDMEMORYSTRING(conf->osdTimeDisplay );
+            break;
+        case 'e':
+            SETGETSHAREDMEMORYSTRING(conf->osdFontName );
+            break;
+        case 'c':
+            SETGETSHAREDMEMORYLONG(conf->osdColor);
+            break;
+        case 's':
+            SETGETSHAREDMEMORYINT(conf->osdSize);
+            break;
+        case 'x':
+            SETGETSHAREDMEMORYINT(conf->osdPosY);
+            break;
+        case 'p':
+            SETGETSHAREDMEMORYINT(conf->osdSpace);
+            break;
+        case 'w':
+            SETGETSHAREDMEMORYBOOL(conf->osdFixedWidth);
+            break;
+        // Motion configuration
+        case 'm':
+            SETGETSHAREDMEMORYINT(conf->sensitivity);
+            break;
+        case 'z':
+           SETGETSHAREDMEMORYINT(conf->motionOSD);
+           break;
+        case 'r':
+            if (get)
+                printf("%d,%d,%d,%d\n", conf->detectionRegion[0], conf->detectionRegion[1],conf->detectionRegion[2],conf->detectionRegion[3]);
+            else
+                stringToInts(value, conf->detectionRegion, 4);
+            break;
+        case 't':
+            SETGETSHAREDMEMORYBOOL(conf->motionTracking);
+            break;
+        case 'u':
+            SETGETSHAREDMEMORYINT(conf->motionTimeout);
+            break;
+        case 'h':
+            SETGETSHAREDMEMORYINT(conf->hardVolume);
+            break;
+        case 'i':
+            SETGETSHAREDMEMORYINT(conf->softVolume);
+            break;
+        case 'q':
+            SETGETSHAREDMEMORYINT(conf->filter);
+            break;
+        case 'l':
+            SETGETSHAREDMEMORYBOOL(conf->highfilter);
+            break;
+        case 'a':
+            SETGETSHAREDMEMORYBOOL(conf->aecfilter);
+            break;
+        case 'd':
+            if (get)
+                printf("%d,%d\n", conf->frmRateConfig[0], conf->frmRateConfig[1]);
+            else
+                stringToInts(value, conf->frmRateConfig, 2);
+            break;
+
+    default:
+        printf("Invalid Argument %c\n", key);
+        usage(argv[0]);
+        exit(EXIT_FAILURE);
+    }
+    mem.setConfig();
+    //mem.readConfig();
+    //printf("%d,%d\n", conf->nightmode, conf->flip);
+
+    return 0;
+
+
+}
+
diff -Nura v4l2rtspserver_imp/tools/sharedmem.cpp v4l2rtspserver_imp_tools/tools/sharedmem.cpp
--- v4l2rtspserver_imp/tools/sharedmem.cpp	1970-01-01 01:00:00.000000000 +0100
+++ v4l2rtspserver_imp_tools/tools/sharedmem.cpp	2019-02-03 20:24:23.665172000 +0100
@@ -0,0 +1,151 @@
+#include <cstdlib>
+#include "sharedmem.h"
+
+SharedMem::SharedMem() {
+    currentConfig.nightmode = 0;
+    currentConfig.flip = 0;
+    memset(currentConfig.osdTimeDisplay,0,STRING_MAX_SIZE);
+    currentConfig.osdColor = 0;
+    currentConfig.osdSize = 0;
+    currentConfig.osdFixedWidth = 0;
+    currentConfig.sensitivity = -2;
+    currentConfig.motionOSD = 0;
+    currentConfig.detectionRegion[0] = 0;
+    currentConfig.detectionRegion[1] = 0;
+    currentConfig.detectionRegion[2] = 0;
+    currentConfig.detectionRegion[3] = 0;
+    currentConfig.motionTracking = false;
+    currentConfig.motionTimeout = -1;
+    currentConfig.softVolume = -1;
+    currentConfig.hardVolume = -1;
+    currentConfig.filter = 0;
+    currentConfig.highfilter = 0;
+    currentConfig.aecfilter = 0;
+    currentConfig.frmRateConfig[0] = 25;
+    currentConfig.frmRateConfig[1] = 1;
+    memset(currentConfig.osdFontName,0,STRING_MAX_SIZE);
+
+    key_image_mem = ftok("/usr/", '1');
+    key_image_semaphore = ftok("/usr/", '2');
+    key_config_mem = ftok("/usr/", '3');
+    key_config_semaphore = ftok("/usr/", '4');
+
+    semaphore_lock[0].sem_flg = 0;
+    semaphore_lock[0].sem_num = (unsigned short) -1;
+    semaphore_lock[0].sem_op = SEM_UNDO;
+
+
+    semaphore_unlock[0].sem_flg = 0;
+    semaphore_unlock[0].sem_num = (unsigned short) 1;
+    semaphore_unlock[0].sem_op = SEM_UNDO;
+
+
+
+}
+
+SharedMem::~SharedMem() {
+
+}
+
+int SharedMem::getImageSize() {
+    return this->getMemorySize(key_image_mem);
+}
+
+void *SharedMem::getImageBuffer() {
+    int memlen = this->getImageSize();
+    void *memory = malloc(memlen);
+
+    this->lockSemaphore(key_image_semaphore);
+    this->readMemory(key_image_mem, memory, memlen);
+    this->unlockSemaphore(key_image_semaphore);
+
+
+    return memory;
+}
+
+void SharedMem::copyImage(void *imageMemory, int imageSize) {
+    this->lockSemaphore(key_image_semaphore);
+    this->writeMemory(key_image_mem, imageMemory, imageSize);
+    this->unlockSemaphore(key_image_semaphore);
+}
+
+shared_conf *SharedMem::getConfig() {
+    return &currentConfig;
+}
+
+void SharedMem::readConfig(){
+    this->lockSemaphore(key_config_semaphore);
+    this->readMemory(key_config_mem, &currentConfig, sizeof(shared_conf));
+    this->unlockSemaphore(key_config_semaphore);
+}
+
+void SharedMem::setConfig() {
+    this->lockSemaphore(key_config_semaphore);
+    this->writeMemory(key_config_mem, &currentConfig, sizeof(shared_conf));
+    this->unlockSemaphore(key_config_semaphore);
+}
+
+void SharedMem::lockSemaphore(key_t key) {
+    semop(key, &semaphore_lock[0], 1);
+}
+
+void SharedMem::unlockSemaphore(key_t key) {
+    semop(key, &semaphore_unlock[0], 1);
+
+
+}
+
+void SharedMem::readMemory(key_t key, void *memory, int memorylenght) {
+    void *shared_mem;
+    int shm_id = shmget(key, 0, 0);
+    if (shm_id == -1) {
+        return;
+    }
+    shared_mem = shmat(shm_id, NULL, 0);
+    memcpy(memory, shared_mem, (size_t) memorylenght);
+    shmdt(shared_mem);
+}
+
+int SharedMem::getMemorySize(key_t key) {
+    int shm_id = shmget(key, 0, 0);
+    struct shmid_ds buf;
+    shmctl(shm_id, IPC_STAT, &buf);
+    int memlen = buf.shm_segsz;
+    return memlen;
+}
+
+void SharedMem::writeMemory(key_t key, void *memory, int memorylenght) {
+
+    int shm_id;
+
+    shm_id = shmget(key, 0, 0);
+    if (shm_id != -1) {
+        int memlen = this->getMemorySize(key);
+        if (memlen != memorylenght) {
+            shmctl(shm_id, IPC_RMID, NULL);
+        }
+    }
+
+
+    shm_id = shmget(key, memorylenght, IPC_CREAT);
+    if (shm_id != -1) {
+        void *shared_mem;
+        shared_mem = shmat(shm_id, NULL, 0);
+        memcpy(shared_mem, memory, memorylenght);
+        shmdt(shared_mem);
+    } else {
+
+    }
+
+
+}
+
+void *SharedMem::getImage() {
+    int memlen = getImageSize();
+    void *memory = malloc((size_t) memlen);
+    this->lockSemaphore(key_image_semaphore);
+    this->readMemory(key_image_mem, memory, memlen);
+    this->unlockSemaphore(key_image_semaphore);
+    return memory;
+
+}
diff -Nura v4l2rtspserver_imp/tools/sharedmem.h v4l2rtspserver_imp_tools/tools/sharedmem.h
--- v4l2rtspserver_imp/tools/sharedmem.h	1970-01-01 01:00:00.000000000 +0100
+++ v4l2rtspserver_imp_tools/tools/sharedmem.h	2019-02-03 20:24:23.665172000 +0100
@@ -0,0 +1,93 @@
+#ifndef SHAREDMEM_H
+#define SHAREDMEM_H
+
+#include <sys/types.h>
+#include <sys/ipc.h>
+#include <sys/shm.h>
+#include <string.h>
+#include <sys/sem.h>
+
+#include <cstdint>
+
+#define STRING_MAX_SIZE          256
+
+struct shared_conf {
+    int nightmode;
+    int flip;
+    char osdTimeDisplay[STRING_MAX_SIZE];
+    int bitrate;
+    uint32_t osdColor;
+    int osdSize;
+    int osdPosY;
+    int osdSpace;
+    bool osdFixedWidth;
+    int sensitivity;
+    int motionOSD;
+    int detectionRegion[4]; // x0,y0,x1,y1
+    bool motionTracking;
+    int motionTimeout;
+    int hardVolume;
+    int softVolume;
+    char filter;
+    bool highfilter;
+    bool aecfilter;
+    int frmRateConfig[2];
+    char osdFontName[STRING_MAX_SIZE];
+};
+
+
+class SharedMem {
+public:
+    SharedMem();
+
+    void* getImage();
+
+    static SharedMem &instance() {
+        static SharedMem _instance;
+        return _instance;
+    }
+
+
+    ~SharedMem();
+
+    shared_conf *getConfig();
+    void setConfig();
+
+
+    int getImageSize();
+    void *getImageBuffer();
+    void copyImage(void *imageMemory, int imageSize);
+    void readConfig();
+
+private:
+    key_t key_image_mem;
+    key_t key_image_semaphore;
+    key_t key_config_mem;
+    key_t key_config_semaphore;
+
+    struct shared_conf currentConfig;
+
+
+
+    void readMemory(key_t key, void *memory, int memorylenght);
+
+    void lockSemaphore(key_t key);
+
+    void unlockSemaphore(key_t key);
+
+
+
+    void writeMemory(key_t key, void *memory, int memorylenght);
+
+
+    int getMemorySize(key_t key);
+
+    struct sembuf semaphore_lock[1];
+    struct sembuf semaphore_unlock[1];
+
+
+
+};
+
+
+#endif
